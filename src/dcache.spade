use std::conv::uint_to_bits;
use std::conv::bits_to_uint;

use std::mem::clocked_memory;
use std::mem::read_memory;

use std::ports::new_mut_wire;
use std::ports::read_mut_wire;

struct MemMask {
    size: uint<3>, // 0 indexed
    align: uint<3>, // alignment within octbyte
}

fn chunks<#uint B, #uint N, #uint M>(data: uint<B>) -> [[bool; N]; M] {
    std::conv::unsafe::unsafe_cast(data)
}

fn join<#uint B, #uint N, #uint M>(data: [[bool; N]; M]) -> uint<B> {
    std::conv::unsafe::unsafe_cast(data)
}

// fn zip<#A, #B, T1, T2> (a: [T1; A], b: [T2; B]) -> [(T1, T2); A] {
//     ()
// }

fn byte_mux2(selects: [bool; 8] , a: uint<64>, b: uint<64>) -> uint<64> {
    let s = selects;
    let a = chunks::<64, 8, 8>(a);
    let b = chunks::<64, 8, 8>(b);

    join::<64, 8, 8>([
        if s[0] { a[0] } else { b[0] },
        if s[1] { a[1] } else { b[1] },
        if s[2] { a[2] } else { b[2] },
        if s[3] { a[3] } else { b[3] },
        if s[4] { a[4] } else { b[4] },
        if s[5] { a[5] } else { b[5] },
        if s[6] { a[6] } else { b[6] },
        if s[7] { a[7] } else { b[7] },
    ])
}

impl MemMask {
    fn mask(self) -> uint<8> {
        (0b11111111 >> (7 - zext(self.size))) << zext(self.align)
    }

    fn byte_mask(self) -> uint<64> {
        let inv_size: uint<64> = 7 - zext(self.size);
        let right_shift = inv_size << 3;
        let left_shift = trunc(inv_size - zext(self.align)) << 3;

        (0xffffffffffffffff >> right_shift) << left_shift
    }

    fn byte_mux(self, a: uint<64>, b: uint<64>) -> uint<64> {
        let selects = uint_to_bits(self.mask());
        let a = uint_to_bits(a);
        let b = uint_to_bits(b);
        let byte7 = bits_to_uint(if selects[7] { a[0:8]   } else { b[0:8]   });
        let byte6 = bits_to_uint(if selects[6] { a[8:16]  } else { b[8:16]  });
        let byte5 = bits_to_uint(if selects[5] { a[16:24] } else { b[16:24] });
        let byte4 = bits_to_uint(if selects[4] { a[24:32] } else { b[24:32] });
        let byte3 = bits_to_uint(if selects[3] { a[32:40] } else { b[32:40] });
        let byte2 = bits_to_uint(if selects[2] { a[40:48] } else { b[40:48] });
        let byte1 = bits_to_uint(if selects[1] { a[48:56] } else { b[48:56] });
        let byte0 = bits_to_uint(if selects[0] { a[56:64] } else { b[56:64] });

        byte0 `concat` byte1 `concat` byte2 `concat` byte3 `concat` byte4 `concat` byte5 `concat` byte6 `concat` byte7
    }

    fn clear(self, dest: uint<64>) -> uint<64> {
        let mask = self.byte_mask();
        dest & ~mask
    }

    fn align(self, data: uint<64>) -> uint<64> {
        let shift = ((7 - zext(self.size)) - zext(self.align)) << 3;
        data << shift
    }

    fn insert(self, dest: uint<64>, data: uint<64>) -> uint<64> {
        let mask = self.byte_mask();
        (dest & ~mask) | (self.align(data) & mask)
    }

    fn insert_aligned(self, dest: uint<64>, data: uint<64>) -> uint<64> {
        let mask = self.byte_mask();
        dest & ~mask | data & mask
    }

    fn extract(self, data: uint<64>) -> uint<64> {
        let inv_size: uint<64> = 7 - zext(self.size);
        let left_shift = inv_size << 3;
        let right_shift = trunc(inv_size - zext(self.align)) << 3;
        (data << left_shift) >>> right_shift
    }

    fn size(self) -> uint<4> {
        self.size + 1
    }
}


fn mem_mask<N, M>(size: N, addr: M) -> MemMask {
    MemMask$ (size: trunc(size - 1), align: trunc(addr))
}

fn null_mask() -> MemMask {
    MemMask$ (size: 0, align: 0)
}

struct DResult {
    data: uint<64>,
    tag: DTag,
    busy: bool,
}

struct port DCache {
    index: inv &Option<uint<10>>,
    result: &DResult,
    write: inv &Option<uint<64>>,
}

struct DTag {
    tag: uint<20>,
    valid: bool,
    dirty: bool,
}

pipeline(1) dcache(clk: clock, fill: Option<(uint<9>, uint<20>, uint<128>)>) -> DCache
{
    let index = inst new_mut_wire();
    let write = inst new_mut_wire();

    let (read_en, bank, row, col) = match (fill, inst read_mut_wire(write), inst read_mut_wire(index)) {
        (Some((idx, _, _)), _, _) => (false, trunc(idx >> 8), trunc(idx), 0),
        (_, None, Some(idx)) => {
            let bank: uint<1> = trunc(idx >> 9);
            let row: uint<8> = trunc(idx >> 1);
            let col: uint<1> = trunc(idx);

            (true, bank, row, col)
        },
        _ => (false, stage(+1).bank, stage(+1).row, stage(+1).col),
    };

    let line = concat(bank, row);

    let (write_en, write_data, write_tag) = match (fill, inst read_mut_wire(write)) {
        (Some((_, tag, data)), _) => {
            // We are filling from the flush buffer, write all 128 bits.
            // Set tag with valid, clear dirty
            (true, data, DTag$(tag: tag, valid: true, dirty: false))
        },
        (_, Some(data)) => {
            // We are writing; Mark tag as dirty
            let tag = DTag$(tag: stage(+1).tag_latch.tag, valid: true, dirty: true);
            let latch = stage(+1).mem_latch;

            match col {
                0 => (true, data `concat` trunc(latch), tag),
                1 => (true, trunc(latch >> 64) `concat` data, tag),
            }
        },
        _ => (false, stage(+1).mem_latch, stage(+1).tag_latch),
    };

    let (en0, en1) = match bank {
        0 => (write_en, false),
        1 => (false, write_en),
    };

    // Cache is made up of two banks, each with 256 rows of 128 bits (a full cache line)
    let mem0: Memory<uint<128>, 256> = inst clocked_memory(clk, [(en0, row, write_data)]);
    let mem1: Memory<uint<128>, 256> = inst clocked_memory(clk, [(en1, row, write_data)]);

    // TODO: this should be 88x128, with 4 tags per row.
    let tag_mem: Memory<DTag, 512> = inst clocked_memory(clk, [(write_en, line, write_tag)]);

    // Memory latches, which hold a single cacheline (128 bits) and the tags.
    // Well... I say this is a latch. Right now, the memory is writing the pre-latch values.
    let (mem_latch, tag_latch) = if read_en {
        // Read 128-bit cache line and tag into latch
        let tag = inst read_memory(tag_mem, line);
        match bank {
            0 => (inst read_memory(mem0, row), tag),
            1 => (inst read_memory(mem1, row), tag),
        }
    } else {
        (stage(+1).mem_latch, stage(+1).tag_latch)
    };

reg;
    let data = match (read_en, col) {
        (false, _) => 0,
        // Physically it's taking odd and even columns... but lets simplify
        (true, 0) => trunc(mem_latch >> 64),
        (true, 1) => trunc(mem_latch),
    };

    let d_result = DResult$(
        data,
        tag: tag_latch,
        busy: write_en
    );

    DCache$(
        index: index,
        result: &d_result,
        write: write,
    )
}

#[no_mangle]
pipeline(1) test_harness(
    clk: clock,
    fill: Option<(uint<9>, uint<20>, uint<128>)>,
    write: Option<uint<64>>,
    index: uint<10>,
    read_en: bool
)
  -> DResult
{
        let dcache = inst(1) dcache(clk, fill);
        set dcache.index = if read_en { Option::Some(index) } else { Option::None };
        set dcache.write = write;
reg;

        *dcache.result
}
