use lib::regfile::regfile;
use lib::regfile::RegId;
use lib::icache::icache_read;
use lib::icache::ICache;
use lib::icache::Request;
use lib::icache::Result;
use lib::icache;

use lib::instructions::decode;
use lib::instructions::RegfileMode;
use lib::instructions::RFMuxing;
use lib::instructions::ExMode;
use lib::instructions::Compare;
use lib::instructions::Trap;
use lib::instructions::MemMode;
use lib::instructions::Shift;
use lib::instructions::ShiftSrc;

use lib::dcache::DCache;
use lib::dcache::DResult;
use lib::dcache::MemMask;
use lib::dcache::mem_mask;
use lib::dcache::null_mask;
use lib::dcache::DTag;

use std::ports::new_mut_wire;
use std::ports::read_mut_wire;

fn rs(ins: uint<32>) -> uint<5> {
    trunc(ins >> 21)
}

fn rt(ins: uint<32>) -> uint<5> {
    trunc(ins >> 16)
}

fn rd(ins: uint<32>) -> uint<5> {
    trunc(ins >> 11)
}

fn adder(mode: ExMode, x: uint<64>, y: uint<64>) -> uint<64> {
        let op_x = x;
        let (op_y, carry_in) = match mode {
            ExMode::Sub32 => (~y, 1),
            ExMode::Sub64 => (~y, 1),
            ExMode::SetLess => (~y, 1),
            ExMode::SetLessUnsigned => (~y, 1),
            _ => (y, 0),
        };

        let adder_out: uint<66> = (op_x + op_y + carry_in);
        let out64: uint<64> = (trunc(adder_out));
        let out32: uint<64> = {
            let o32: uint<32> = trunc(out64);
            int_to_uint(sext(uint_to_int(o32)))
        };

        let carry_out: bool = (adder_out >> 64) == 1;
        let sign_out: bool = (out64 >> 63) == 1;

        match mode {
            ExMode::SetLess => if carry_out && !sign_out { 0 } else { 1 },
            ExMode::SetLessUnsigned => if carry_out { 0 } else { 1 },
            ExMode::Add32 => out32,
            ExMode::Sub32 => out32,
            _ => out64,
        }
}

fn shifter(mode: ExMode, shift_mux: uint<64>, rs_val: uint<64>, ins: uint<32>) -> (uint<64>, MemMask)
{
    match mode {
        ExMode::Shift(dir, src) => {

            let shift_imm: uint<5> = trunc(ins >> 6);
            let amount = match src {
                ShiftSrc::Imm => concat(0, shift_imm),
                ShiftSrc::Imm32 => concat(1, shift_imm),
                ShiftSrc::Reg5 => rs_val & 0x1f,
                ShiftSrc::Reg6 => rs_val & 0x3f,
                ShiftSrc::Const16 => 16,
            };

            let result = match dir {
                Shift::LeftLogic => shift_mux << amount,
                Shift::RightLogic => shift_mux >> amount,
                Shift::RightArith => shift_mux >>> amount,
            };

            (result, null_mask())
        },
        ExMode::Memory(size) => {
            // The Shifter is also used to rotate the data for stores that aren't
            // 64-bit aligned.

            let addr_offset: uint<3> = trunc(ins);

            // I'm not sure if this is just tapped off the main adder, or if there
            // is a separate adder just for calculating the required alignment shift
            let lower_addr = trunc(rs_val) + addr_offset;

            let mask = mem_mask(size, lower_addr);

            // TODO: word order swap for little-endian mode

            (mask.align(shift_mux), mask)
        },
        _ => (shift_mux, null_mask()),
    }
}

enum Bypass {
    Zero,
    ExResult,
    DcResult,
    Normal,
}

impl Bypass {
    fn apply(self, regfile: uint<64>, ex: uint<64>, dc: uint<64>, load_interlock: bool) -> uint<64> {

        match self {
            Bypass::Zero => 0,
            Bypass::ExResult => if load_interlock { dc } else { ex },
            Bypass::DcResult => dc,
            Bypass::Normal => regfile,
        }
    }
}

fn check_bypass(reg_id: RegId, ex_dest: RegId, dc_dest: RegId) -> (bool, Bypass) {
    if reg_id.is_zero() {
        // Don't bypass the $zero register as we might get non-zero values
        // from writes and instructions that are writing to the zero register.
        (false, Bypass::Zero)
    } else if ex_dest.index() == reg_id.index() {
        (false, Bypass::ExResult)
    } else if dc_dest.index() == reg_id.index() {
        (false, Bypass::DcResult)
    } else {
        (true, Bypass::Normal)
    }
}

enum Interlock{
    None,
    // From RF
    InstructionTlbMiss,
    InstructionCacheBusy,
    // From EX
    LoadInterlock,
    MultiCycleInterlock,
    Coprocessor2Interlock,
    // From DC,
    DataCacheMiss,
    DataCacheBusy,
    CacheOp,
    // From WB
    Coprocessor0Bypass,
}

enum Exception {
    None,
    Reset,
    Nmi,
    DataTLBMiss,
    DataTLBInvalid,
    DataTLBModification,
    ReservedInstruction,
    Unimplemented,
    Syscall,
}

enum PipelineResult {
    Ok,
    Reset,
    ExceptionWB{exception: Exception},
    Stall{interlock: Interlock},
}

struct ExternalRequest {
    addr: uint<32>,
    data: uint<64>,
    size: uint<3>,
    write: bool,
}

pipeline(5) r4200_pipeline(
    phase2: clock,
    phase1: clock,
    rst: bool,
    icache: ICache,
    dcache: DCache
) -> (uint<64>, PipelineResult, ExternalRequest)
{
        let fetch_en = stage.ready;
        reg(phase1) pc = if fetch_en { stage(EX).nextpc } else { pc };
        'IC // Instruction Cache
        // Nothing happens in phase1 of the IC stage
        // It's waiting for the program counter to be calculated during EX phase1

        let (ins, itag, valid) = inst(1) icache_read(phase1, icache, fetch_en, pc);

        // todo: micro-TLB read
        let expected_itag = trunc(pc >> 12);

        // flushes propergate backwards
        let flush = stage(EX).ex_flushing || stage(DC).dc_flushing;

    reg;
        'RF // Register File

        let rs = RegId::Integer( rs(ins) );
        let rt = RegId::Integer( rt(ins) );
        let rd = RegId::Integer( rd(ins) );

        // We pre-calculate the bypassing here, because the register read ports
        // are disabled when bypassing for power saving reasons:
        //    "To save power, each read port can be disabled independently for
        //     instructions not requiring a read operand from that port or at
        //     certain times when the read operand is being bypassed from a
        //     later pipeline stage." - unified datapath paper

        let (en_s, rs_bypass) = check_bypass(rs, stage(EX).dest, stage(DC).dest);
        let (en_t, rt_bypass) = check_bypass(rt, stage(EX).dest, stage(DC).dest);

        let write = stage(WB).regfile_write;
        let (rs_read, rt_read) = inst(1) regfile$(phase2, phase1, rs, rt, en_s, en_t, write);

        // TODO: IADE / ITLB / IBE exceptions
        //       I'm not sure these even happen in the RF stage. The documentation says they do,
        //       but it's possible anything that misses the microTLB actually injects a false
        //       load instruction into the pipeline, which then gets handled as a regular data
        //       load.
        let rf_exception = Exception::None;

        let flush = flush || stage(EX).ex_flushing || stage(DC).dc_flushing;

        let interlock = if false {
            Interlock::InstructionTlbMiss
        } else if fetch_en && (!valid || itag != expected_itag) {
            Interlock::InstructionCacheBusy
        } else {
            Interlock::None
        };

        let inst_info = decode(ins);
    reg;
        'EX // Execute

        let dest = match inst_info.rf_muxing {
            RFMuxing::RsRt => rt,
            RFMuxing::RsImmSigned => rt,
            RFMuxing::RsImmUnsigned => rt,
            RFMuxing::ImmUpper => rt,
            RFMuxing::Shift => rd,
            RFMuxing::Shift64 => rd,
            RFMuxing::Memory => rt,
            RFMuxing::MemoryNoWB => RegId::Integer(0),
            RFMuxing::Jump26 => RegId::Integer(0),
        };

        let dc_dest = stage(DC).dest;

        let (rs_interlock, rt_interlock) = match stage(DC).inst_info.mem_mode {
            MemMode::Load => (dc_dest.eq(rs), dc_dest.eq(rt)),
            MemMode::LinkedLoad => (dc_dest.eq(rs), dc_dest.eq(rt)),
            _ => (false, false),
        };

        let load_interlock = (rs_interlock || rt_interlock) && !stage(DC).load_done;

    // Bypass muxes
        let rs_val = rs_bypass.apply(rs_read, stage(DC).ex_result, stage(DC).dc_result, rs_interlock);
        let rt_val = rt_bypass.apply(rt_read, stage(DC).ex_result, stage(DC).dc_result, rt_interlock);

    // Immediate sign extend:
        let imm16: uint<16> = trunc(ins);
        let signed_imm: uint<64> = int_to_uint(sext(uint_to_int(imm16)));

    // LogicUnit:
        let op_mux = match inst_info.rf_muxing {
            RFMuxing::RsRt => rt_val,
            // From what I can tell, the logic unit always use unsigned immediates
            // while the adder always does a sign-extend on it's immediates
            _ => zext(imm16),
        };

        let logic_result = match inst_info.ex_mode {
            ExMode::And => trunc(rs_val & op_mux),
            ExMode::Or => trunc(rs_val | op_mux),
            ExMode::Xor => trunc(rs_val ^ op_mux),
            ExMode::Nor => trunc(~(rs_val | op_mux)),
            _ => 0,
        };

        // The logic unit responsible for "detecting equal operands for integer and
        // floating- point operand comparisons and determining the outcome of conditional
        // branches and traps." -- unified datapath paper
        // It's scope is limited to just operations are either equality, or sign relative to zero.
        // These compares are the only compares that can be in branch/trap instructions.
        // More complex compare instructions are executed as a subtract on the adder
        // and can't be used for branching.

        let is_zero = rs_val == 0;
        let is_neg = (rs_val >> 63) == 1;
        let is_equal = rs_val == rt_val;

        let branch_compare = match inst_info.ex_mode {
            ExMode::Branch(Compare::Equal) => is_equal,
            ExMode::Branch(Compare::NotEqual) => !is_equal,
            ExMode::Branch(Compare::GreaterThanZero) => !is_neg && !is_zero,
            ExMode::Branch(Compare::GreaterEqualZero) => !is_neg || is_zero,
            ExMode::Branch(Compare::LessThanZero) => is_neg && !is_zero,
            ExMode::Branch(Compare::LessEqualZero) => is_neg || is_zero,
            _ => false,
        };

    // Shifter:
        let shift_mux = match inst_info.rf_muxing {
            RFMuxing::RsRt => rt_val,
            RFMuxing::Memory => rt_val,
            RFMuxing::MemoryNoWB => rt_val,
            RFMuxing::RsImmSigned => signed_imm,
            _ => 0,
        };
        let (shift_result, mask) = shifter(inst_info.ex_mode, shift_mux, rs_val, ins);


    // Instruction Adder:
        let thispc = stage(IC).pc;
        let bev = false;
        let exl = false;
        let vector_base: uint<64> = if bev { 0xffffffff_80000000 } else { 0xffffffff_bfc00200 };
        let pc_off = if flush || !branch_compare { 4 } else { signed_imm << 2 };

        let exception = match (stage(WB).dc_exception, stage(EX).ex_exception, stage(RF).rf_exception) {
            (Exception::None, Exception::None, reason) => reason,
            (Exception::None, reason, _) => reason,
            (reason, _, _) => reason,
        };

        let nextpc = match (exception, exl) {
            (Exception::None, _) => match inst_info.ex_mode {
                ExMode::JumpImm26 => {
                    let imm26: uint<28> = trunc(ins << 2);
                    let upper_bits: uint<36> = trunc(pc >> 28);
                    concat(upper_bits, imm26)
                },
                ExMode::JumpReg => rs_val,
                _ => trunc(thispc + pc_off),
            },
            (Exception::Reset, _) => trunc(vector_base - 0x200),
            (Exception::Nmi, _) => trunc(vector_base - 0x200),
            (Exception::DataTLBMiss, false) => vector_base,
            _ => trunc(vector_base + 0x180),
        };

    // 64-bit Carry-Propagate adder:
        let (x_mux, y_mux) =  match inst_info.rf_muxing {
            // TODO: inputs from sum_reg and the multiplier
            RFMuxing::RsRt => (rs_val, rt_val),
            _ => (rs_val, signed_imm),
        };

        let add_result = adder(inst_info.ex_mode, x_mux, y_mux);
        let data_virtual_address = add_result;
        let index = trunc(data_virtual_address >> 3);

        let (dcache_en, dcache_write_en) = match inst_info.mem_mode {
            MemMode::Nop => (false, false),
            MemMode::Load => (true, false),
            MemMode::Store => (true, true),
            MemMode::Cache => (true, false),
            MemMode::LinkedLoad => (true, false),
            MemMode::ConditionalStore => (true, true),
        };

        // Start the dcache access now
        set dcache.index = if dcache_en { Some(index) } else { None };

    // R Mux:
        // Logically it would make more sense to have a single 3-way Result mux later on.
        // But the shifter and logic ops are physically before the adder and multiplier
        // in the 64bit data-path, so by combining them early, there is one less wire to
        // run though the adder.

        let r_mux = match inst_info.ex_mode {
            ExMode::And => logic_result,
            ExMode::Or  => logic_result,
            ExMode::Xor => logic_result,
            ExMode::Nor => logic_result,
            _ => shift_result,
        };

    // Result Mux:
        let result_mux = match inst_info.ex_mode {
            ExMode::Add32 => add_result,
            ExMode::Add64 => add_result,
            ExMode::Sub32 => add_result,
            ExMode::Sub64 => add_result,
            ExMode::SetLess => add_result,
            ExMode::SetLessUnsigned => add_result,
            _ => r_mux,
        };

    // Sum Reg:
        // The sum reg is used to hold intermediate results of multi-cycle
        // multiplication and division operations.
        reg(phase2) sum_reg = result_mux;

    // Packer:
        // todo: pack floating point results
        let ex_result: uint<64> = result_mux;

    // Exceptions/Interlocks:
        let (ex_flushing, ex_exception) = match inst_info.exception {
            Trap::Reserved => (true, Exception::ReservedInstruction),
            Trap::Syscall => (true, Exception::Syscall),
            Trap::Unimplemented => (true, Exception::Unimplemented),
            // TODO: implement the rest of the traps
            _ => (false, Exception::None),
        };
        let flush = flush || ex_flushing || stage(DC).dc_flushing;

        let interlock = if load_interlock {
            Interlock::LoadInterlock
        } else if false {
            Interlock::MultiCycleInterlock
        } else if false {
            Interlock::Coprocessor2Interlock
        } else {
            stage(-1).interlock
        };

    reg;
        'DC // Data Cache

        reg(phase2) load_done = !stage.ready;

        // TODO: Get real tag from TLB
        let expected_tag: uint<20> = trunc(data_virtual_address >> 12);
        let external = data_virtual_address & 0xe0000000 == 0xa0000000;
        let external_addr: uint<29> = trunc(data_virtual_address);

        let dcache_access = *dcache.result;
        let read_data = dcache_access.data;

        let tag_matched = dcache_access.tag.tag == expected_tag;
        let valid = dcache_access.tag.valid;
        let dcache_miss = dcache_en && !(valid && tag_matched);
        let write_blocked = dcache_write_en && !dcache_access.tag.dirty;

        let write_data = if dcache_write_en { mask.insert_aligned(read_data, ex_result) } else { 0 };

    // Load aligner:
        // The main shifter is used to align data for stores, but for timing
        // requirements, there is a separate shifter to align data from loads.
        let aligned_load = mask.extract(dcache_access.data);

        // We need an explicit reg here so it updates even when stalled
        reg(phase2) dc_result = match inst_info.mem_mode {
            MemMode::Nop => ex_result,
            MemMode::Load => aligned_load,
            MemMode::Store => 0,
            MemMode::Cache => 0,
            MemMode::LinkedLoad => aligned_load,
            MemMode::ConditionalStore => 1,
        };

        let (dc_flushing, dc_exception) = if stage(IC).rst {
            (true, Exception::Reset)
        // } else if false {
        //     (true, Exception::Nmi)
        // } else if !tag_matched {
        //     (true, Exception::DataTLBMiss)
        // } else if !valid {
        //     (true, Exception::DataTLBInvalid)
        // } else if write_blocked {
        //     (true, Exception::DataTLBModification)
        } else {
            (false, Exception::None)
        };

        let flush = dc_flushing || flush;

        let interlock = if dcache_miss && !external {
            Interlock::DataCacheMiss
        } else if dcache_access.busy {
            Interlock::DataCacheBusy
        } else if false {
            Interlock::CacheOp
        } else {
            stage(-1).interlock
        };

    reg;
        'WB // Writeback

        let en = !flush && stage.ready;

        // directly access the dc_result reg, otherwise it would be delayed a cycle
        let regfile_write = (if en { dest } else { RegId::Integer(0) }, stage(-1).dc_result);
        set dcache.write = if dcache_write_en && !external && en { Some(write_data) } else { None };
        let external_write = ExternalRequest$(addr: concat(0, external_addr), data: ex_result, size: mask.size, write: dcache_write_en && external && en);

        let interlock = if false {
            Interlock::Coprocessor0Bypass
        } else {
            stage(-1).interlock
        };

        let stall = match interlock {
            Interlock::None => false,
            _ => true,
        };

    reg[rst || !stall || flush];
        let status = match (stage(WB).interlock, stage(EX).exception) {
            (Interlock::None, Exception::None) => PipelineResult::Ok,
            (reason, Exception::None) => PipelineResult::Stall(reason),
            (_, reason) => PipelineResult::ExceptionWB(reason),
        };
        (stage(IC).pc, status, stage(WB).external_write)
}

pipeline(1) test_adder(clk: clock, mode: ExMode, x: uint<64>, y: uint<64>) -> uint<64>
{
        let add_result = adder(mode, x, y);
    reg;
        add_result
}

pipeline(1) test_shifter(clk: clock, mode: ExMode, shift_mux: uint<64>, rs_val: uint<64>, ins: uint<32>) -> uint<64>
{
        let (shift_result, mask) = shifter(mode, shift_mux, rs_val, ins);
    reg;
        shift_result
}

struct TestResult {
    next_pc: uint<64>,
    index: uint<13>,
    fetch_en: bool,
    d_index: uint<10>,
    d_index_valid: bool,
    write: uint<64>,
    write_en: bool,
    status: PipelineResult,
    external: ExternalRequest,
}

pipeline(5) test_pipeline(
    phase1: clock,
    phase2: clock,
    rst: bool,
    ins: uint<32>,
    tag: uint<20>,
    valid: bool,
    data: uint<64>,
    d_tag: uint<20>,
    d_valid: bool,
) -> TestResult
{
    // Create a fake Instruction Cache
    let result = icache::Result$(
        data: ins,
        tag: tag,
        valid: valid,
    );
    let request = inst new_mut_wire();
    let icache = ICache$(request, result: &result);

    // And a fake Data Cache
    let d_result = {
        let tag = DTag$(tag: d_tag, valid: d_valid, dirty: false);
        DResult$(data: data, tag, busy: false)
    };
    let d_index = inst new_mut_wire();
    let d_write = inst new_mut_wire();

    let dcache = DCache$(
        index: d_index,
        result: &d_result,
        write: d_write,
    );

    // instantiate the pipeline
    let (next_pc, status, external) = inst(5) r4200_pipeline(phase2, phase1, rst, icache, dcache);

reg * 5;

    let Request$( en: fetch_en, index ) = inst read_mut_wire(request);
    let (write, write_en) = match inst read_mut_wire(d_write) {
        Some(data) => (data, true),
        None => (0, false),
    };
    let (d_index, d_index_valid) = match inst read_mut_wire(d_index) {
        Option::Some(index) => (index, true),
        Option::None => (0, false),
    };

    TestResult$(next_pc, index, fetch_en, write, write_en, d_index, d_index_valid, status, external)
}
